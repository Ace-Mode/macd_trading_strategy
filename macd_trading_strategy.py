# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m4l5RnChLQnrIIoPiQYDWvTnhFsqiAgp
"""

#intalling libraries
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
plt.style.use("dark_background")

#loading data
from google.colab import files 
upload = files.upload()

#storing data in a dataframe 
df = pd.read_csv("AAPL.csv")

#setting date as the index (index was numerical before but is now dates)
df = df.set_index(pd.DatetimeIndex(df["Date"].values))

#showing the dataframe 
df

#Visually shhowing stock price
plt.figure(figsize=(15, 6))
plt.plot(df["Close"], label = "Close")
plt.xticks(rotation = 50)
plt.title("History of Close Price")
plt.xlabel("Data")
plt.ylabel("Price USD ($)")
plt.show()

#Calculating the MACF and signal line indicators
#Calculating the short term exponential moving Average (EMA)
short_ema = df.Close.ewm(span = 12, adjust = False ).mean() #span = 12 because short term lasts 12 periods 

#Caclulating the long term exponential moving Average (EMA)
long_ema = df.Close.ewm(span = 26, adjust = False ).mean() #span = 12 because long term lasts 26 periods 

#Calculating the MACD line
macd = short_ema - long_ema

#Calculating the signal line 
signal_line = macd.ewm(span = 9, adjust = False).mean()

#plotting chart
plt.figure(figsize=(15, 6))
plt.plot(df.index, macd, label = "AAPL MACD", color = "red")
plt.plot(df.index, signal_line , label = "Signal Line", color = "green")
plt.legend(loc = "upper right")
plt.show()

#creating new coloumn for the data
df["MACD"] = macd
df["Signal_line"] = signal_line
df

#Creating function signaling when to buy and when to sell an asset
def buy_sell(signal_line):
   buy = []
   sell = []
   flag = -1 #checks if the price continues to rise or it starts to fall 

  #looking over data
   for i in range(0, len(signal_line)):
     if signal_line["MACD"][i] > signal_line["Signal_line"][i]: #going through each row to check when MACD line is greater than signal line
      sell.append(np.nan)  #not a number
      
      if flag != 1: #meaning that we have not been at this range before
        buy.append(signal_line["Close"][i])
        flag = 1 #assigning indication that we have been at this range 
      else:
        buy.append(np.nan)
     elif signal_line["MACD"][i] < signal_line["Signal_line"][i]: #going through each row to check when MACD line is less than signal line, signal line has crossed macd line 
       buy.append(np.nan)  #not a number
       if flag != 0: #meaning that we have not been at this range before
           sell.append(signal_line["Close"][i])
           flag = 0 #assigning indication that we have been at this range 
       else:
        sell.append(np.nan)
     else:
       buy.append(np.nan)
       sell.append(np.nan)
   return(buy, sell)

#creating buy and sell column 
a = buy_sell(df)
df["buy_signal_price"] = a[0]
df["sell_signal_price"] = a[1]

#showing the data
df

#visual represent buy and sell signals
plt.figure(figsize=(15,6))
plt.scatter(df.index, df["buy_signal_price"], color = "yellow", label = "Buy", marker = "^", alpha = 1)
plt.scatter(df.index, df["sell_signal_price"], color = "red", label = "Sell", marker = "v", alpha = 1)
plt.plot(df["Close"], label = "Close Price", color = "white", alpha = 0.60)
plt.title("Close Price Buy & sell signals")
plt.xlabel("Date")
plt.ylabel("Close PriceUSD(($)")
plt.legend(loc = "upper right")
plt.show